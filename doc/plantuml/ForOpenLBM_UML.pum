@startuml

class Block_t <<(T, orchid>>{
    -- Attributes --
    #bool :: active
    
    == Functions ==
    +bool :: isActive()
    +bool :: setActive()

}

class CoordinateBlock_t <<(T, orchid)>>{
     -- Attributes --
     +real, allocatable, dimension(:, :, :, :) :: coords

    == Subroutines ==
    +real, pointer :: getX()

}

CoordinateBlock_t --> Block_t

class Patch_t <<(T, orchid)>> {

    -- Attributes --
    #type(Patch_t) :: parent

    -- Allocatable Attributes --
    +type(Block_t), allocatable :: blocks
    +type(Patch_t), allocatable :: children
    +type(Patch_t), allocatable :: neighbors

    == Subroutines ==

    +addBlock( Block_t block)
    +deleteBlock( Block_t block)
    +addChildren( Patch_t patch )
    +addNeighbor( Patch_t patch )
}

Patch_t *-- Block_t

class PatchGrid_t <<(T, orchid)>> {
    -- Pointer Attributes --
    #type(Patch_t), pointer :: patchSet

    == Subroutines ==
    +addPatch( Patch_t patch)
    +type(Patch_t), pointer :: getPatches()
    +adapt( visitor )
}

PatchGrid_t *-- Patch_t

class MacroVar <<(T, orchid)>>{
    -- Pointer Attribute --
    #real, pointer :: value(:, :, :, :)

    == Subroutines ==
    #real, pointer getValue()
}

class IsoCompMacroVar_t <<(T, orchid)>>{
    -- Pointer Attributes --
    #type(MacroVar) :: density
    #type(MacroVar) :: velocity

    == Subroutines ==
    +real, pointer :: getDensity()
    +real, pointer :: getVelocity()

}
IsoCompMacroVar_t "1" *-- "2" MacroVar

class Collide_t <<(T, orchid)>>{
      +real, parameter :: collideParam
}

class BGKCollide_t <<(T, orchid)>>{
      +type(Collide_T) :: omega

      -- Interface: BGKCollide_t --
      module procedure initCollide
}

BGKCollide_t --> Collide_t

class LatticeBlock_t <<(T, orchid)>>{
    -- Pointer Attributes --
    #real, pointer :: distributions(:, :, :, :)
    #real, pointer :: tempDistributions(:, :, :, :)
    #real, pointer :: fEq(:, :, :, :)
    
    == Methods ==
    +real, pointer :: getDistributions()
    +real, pointer :: getTempDistributions()
    +real, pointer :: getFeq()

}

LatticeBlock_t --> Block_t
LatticeBlock_t --> IsoCompMacroVar_t

class BoundaryCondition_t <<(T, orchid)>>{
    -- Attributes --
    #real, pointer :: distributions
    #char, pointer :: bcFlag

    == Subroutines ==
    +real, pointer :: getBoundaryValue()
}
BoundaryCondition_t --> Block_t

class BoundaryConditionArray_t<<(T, orchid)>>{
    -- Pointer Attributes --
    #type(BoundaryCondition_t), pointer :: BoundaryConditionArray_t

    == Subroutines ==
    +setBoundary()
    +type(BoundaryCondition_t) getBCArray()
}

BoundaryConditionArray_t *-- BoundaryCondition_t

class ForOpenLBMManager <<(T, orchid)>>{
      -- 
}

@enduml
